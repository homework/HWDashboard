(function() {
  var DASHBOARD_PORT, LOG_LEVEL, aggregator;
  LOG_LEVEL = 5;
  DASHBOARD_PORT = 80;
  aggregator = require('./aggregator').aggregator;
  aggregator.initialize();
  "HWDashboardLogger = require('./logger').logger\nlog = new HWDashboardLogger \"hwdbdashboard\", LOG_LEVEL\n\nlog.notice \"Starting HWDashboard\"\n\nstream_jsrpc  = require('./jsrpc').jsrpc\nquery_jsrpc   = require('./jsrpc').jsrpc\nnow_app       = require('now')\nexpress       = require('express')\n\nrest_server = express.createServer()\nio_server   = now_app.initialize(rest_server)\n\nrest_server.configure( ->\n  rest_server.use express.static(__dirname + '/../public')\n  rest_server.use(express.bodyParser())\n)\n\nio_server.now.serverOutput = (data) ->\n  console.log(data)\n\nstream_jsrpc.connect()\nstream_jsrpc.query(\"SQL:subscribe BWUsageLast 127.0.0.1 \")\n\nstream_jsrpc.on('timedout', ->\n  log.error \"JSRPC timed out, process exiting\"\n  process.exit(1)\n)\nlog.info \"JSRPC setup executed\"\n\ndd = require('./dummydata').dummy_data\nstate_builder = require('./statebuilder').statebuilder\n\ntodays_state =\n  household:\n              usage:        0\n              allowance:    900000000\n  devices: {}\n# Update todays state from stream\nstream_jsrpc.on('message', (data) ->\n  if data is \"Success\"\n    console.log \"Connected\"\n  else\n    todays_state = state_builder.parseResult(data, todays_state)\n    console.log todays_state\n    io_server.now.updateView todays_state\n)\n\nio_server.now.queryMonths = (startYear, startMonth, endYear, endMonth) ->\n\n  #TO BE FIXED, TIMEZONE INVALID DUE TO DST\n  month_start = new Date(startYear, startMonth+1, 1)\n  month_end   = new Date(endYear, endMonth+1, 1)\n\n  ns = state_builder.parseResult(dd[0], 0, month_start, month_end)\n  io_server.now.updateView ns\n  \n  query_jsrpc.query(\"SQL:select * from BWUsage range (\" + month_start + \", \" + month_end + \")\") \n\n  query_jsrpc.on('message', (data) ->\n    io_server.now.updateView state_builder.parseResult(data, 0, month_start, month_end)\n  )\n\nrest_server.get('/*', (req, res) ->\n  res.sendfile('../public/index.html', (err) ->\n    console.log err\n  )\n)\n\nif !module.parent\n  rest_server.listen(DASHBOARD_PORT, ->\n    addr = rest_server.address()\n  )\n  log.notice \"Dashboard server listening on port \" + DASHBOARD_PORT\n  process.on 'SIGINT', ->\n    stats_jsrpc.disconnect()\n    stats_jsrpc.on 'disconnected', ->\n      log.notice \"HWDashboard killed by SIGINT, exited gracefully\"\n      process.exit(0)\n    process.exit(0)";
}).call(this);
